{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAepC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAwCK,OAAfR,EAAS,QAAYQ,OAANP,EAAM,OAEpDG,EAAK,sBAAqCI,OAAfR,EAAS,QAAYQ,OAANP,EAAM,M,GAEnDA,E,IAvBPL,EAAKa,iBAAiB,UAAU,SAAAC,GAC9BA,EAAEC,iBAMF,IAJA,IAAIV,EAAQW,OAAOhB,EAAKiB,SAASZ,MAAMa,OACnCC,EAAOnB,EAAKiB,SAASE,KAAKD,MAC1BE,EAASpB,EAAKiB,SAASG,OAAOF,MAEzBG,EAAI,EAAGA,EAAID,EAAQC,IAC1BlB,EAAckB,EAAGF,EAAOE,EAAIhB,GACzBiB,MAAK,SAAAC,G,OAAWC,EAAA1B,GAAS2B,OAAOF,QAAQA,E,IACxCG,OAAM,SAAAC,G,OAASH,EAAA1B,GAAS2B,OAAOG,QAAQD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  let delay = Number(form.elements.delay.value);\n  let step = form.elements.step.value;\n  let amount = form.elements.amount.value;\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i, step * i + delay)\n      .then(success => Notiflix.Notify.success(success))\n      .catch(error => Notiflix.Notify.failure(error));\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","concat","addEventListener","e","preventDefault","Number","elements","value","step","amount","i","then","success","$parcel$interopDefault","Notify","catch","error","failure"],"version":3,"file":"03-promises.5ea0ae7c.js.map"}